<configuration>
  <system.web>
  	<httpModules>
  	  <add name="ErrorditeModule" type="Errordite.Client.Mvc.ErrorditeModule, Errordite.Client.Mvc4"/>
    </httpModules>
  </system.web>  
  <system.webServer>
    <validation validateIntegratedModeConfiguration="false"/>
    <modules>
      <add name="ErrorditeModule" type="Errordite.Client.Mvc.ErrorditeModule, Errordite.Client.Mvc4"/>
    </modules>
  </system.webServer>
  <errordite token="[YOUR-TOKEN-HERE]" enabled="true">
    <dataCollectors>
    <!--The DataCollectors configured here control the data collected and sent to Errordite with the error.
      The HttpContextDataCollector collects information about the current HttpContext. You can create custom 
      DataCollectors - just create a class that implements Errordite.Client.Interfaces.IDataCollector and add 
      a reference to it in a dataCollector tag. 

      The prefix specified is prepended to all collected data items for display in Errordite.  
      To send an error to Errordite at any time just call ErrorditeClient.ReportException();   -->
      <dataCollector prefix="HttpContext" type="Errordite.Client.DataCollectors.HttpContextDataCollector, Errordite.Client" />
    </dataCollectors>
    <sanitiseParams>
      <!--To prevent sensitive data being sent to Errordite by the HttpContextDataCollector, any form parameters specified here will be obscured.
      Values for the match attribute can be "Exact" or "Contains". -->
      <param name="Password" match="Contains" />
    </sanitiseParams>
    <unwrapExceptions>
      <!--To strip off outer exceptions of particular types that are merely "wrapper" exceptions and do
      not contain any useful information themselves, add a type here.  In case of a matching exception,
      the inner exception is sent instead. -->  
      <exception typeName="System.Web.HttpUnhandledException" />
    </unwrapExceptions>
    <ignoreExceptions>
      <!--Adding an exception type here will prevent it being sent to Errordite.  In the case of a 
      System.Web.HttpException, you can further specify the HTTP response code to ignore.-->
        <!--<exception typeName="MyNamespace.MyExceptionTypeToIgnore" />-->
    </ignoreExceptions>
  </errordite>
 </configuration>